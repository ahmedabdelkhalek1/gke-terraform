name: 'Terraform destroy'

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

# Sourcing common variables from repository secrets
env:
  TERRAFORM_VERSION: ${{ secrets.TERRAFORM_VERSION }}
  PROJECT_ID:       ${{ secrets.PROJECT_ID }}
  WORKING_DIR:      ${{ secrets.WORKING_DIR }}
  WIF_PROVIDER:     ${{ secrets.WIF_PROVIDER }}
  SERVICE_ACCOUNT:  ${{ secrets.SERVICE_ACCOUNT }}

jobs:
  destroy-plan:
    name: Plan Destroy Infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Google Auth
        uses: 'google-github-actions/auth@v2'
        with:
          project_id:                ${{ env.PROJECT_ID }}
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account:           ${{ env.SERVICE_ACCOUNT }}

      - name: Initialize Terraform
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }}

      - name: Terraform Destroy Plan
        run: terraform plan -destroy
        working-directory: ${{ env.WORKING_DIR }}

  destroy:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest
    environment: production # requires manual approval if environment protection rules exist
    needs: destroy-plan
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Google Auth
        uses: 'google-github-actions/auth@v2'
        with:
          project_id:                ${{ env.PROJECT_ID }}
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account:           ${{ env.SERVICE_ACCOUNT }}

      - name: Initialize Terraform
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }}

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
        working-directory: ${{ env.WORKING_DIR }}

      - name: Confirm Destruction
        run: echo "Infrastructure has been successfully destroyed!"
