name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - README.md
      - .gitignore
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GCP_PROJECT: artful-fragment-458014-j4
  TF_VERSION: 1.5.7
  TF_WORKING_DIR: infra/environment

permissions:
  contents: read    # for checkout & artifacts
  id-token: write   # for GCP OIDC

##########################
# 1. COMMON SETUP JOB    #
##########################
jobs:
  setup:
    name: Prepare Runner
    runs-on: ubuntu-latest
    outputs:
      terraform-version: ${{ steps.setup-terraform.outputs.terraform-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        id: setup-terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ env.GCP_PROJECT }}
          workload_identity_provider: projects/447195453845/locations/global/workloadIdentityPools/github-actions-pool/providers/github-gke-terraform
          service_account: gke-terraform-service-account@${{ env.GCP_PROJECT }}.iam.gserviceaccount.com

      - name: Cache Terraform plugins
        uses: actions/cache@v3
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}
          restore-keys: ${{ runner.os }}-terraform-

##########################
# 2. TERRAFORM PLANNING  #
##########################
  terraform:
    name: Terraform Plan
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Init
        run: terraform init -input=false
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -out=plan.tfplan
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Upload Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: ${{ env.TF_WORKING_DIR }}/plan.tfplan

################################
# 3. APPLY (gated in Production)
################################
  apply:
    name: Terraform Apply
    needs: terraform
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment:
      name: production     # require manual approval in repo settings

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve plan.tfplan
        working-directory: ${{ env.TF_WORKING_DIR }}

#################
# 4. APP TESTING
#################
  test-apps:
    name: Run Application Tests
    needs: apply
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Tests
        run: |
          echo "Running your app tests…"
          # Replace the next line with your actual test command:
          echo "✅ Tests succeeded!"

##################
# 5. DEPLOY TO GKE
##################
  deploy-apps:
    name: Deploy to GKE
    needs: test-apps
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get GKE Credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: your-cluster-name
          location: your-cluster-zone

      - name: kubectl Apply Manifests
        run: kubectl apply -f k8s/

# ##########################
# # 6. FAILURE NOTIFICATIONS
# ##########################
#   slack-notify:
#     name: Notify Slack on Failure
#     needs: [setup, terraform, apply, test-apps, deploy-apps]
#     if: ${{ always() && (failure() || cancelled()) }}
#     runs-on: ubuntu-latest
#     steps:
#       - name: Send Slack Alert
#         uses: slackapi/slack-github-action@v1.27.0
#         with:
#           slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
#           payload: |
#             {
#               "text": ":warning: CI/CD pipeline *${{ github.workflow }}* failed for `${{ github.ref_name }}`."
#             }
